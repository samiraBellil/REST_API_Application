{"ast":null,"code":"import _defineProperty from \"/home/samira/Desktop/Work_DOC/react-frontend-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport uuid from 'uuid';\nimport { ADD_CONTACT, DELETE_CONTACT, EDIT_CONTACT, GET_CONTACTS } from '../actions/types';\n\nconst ContactReducer = (state = {\n  contacts: []\n}, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return _objectSpread({}, state, {\n        contacts: action.payload\n      });\n\n    case ADD_CONTACT:\n      return [...state, action.newContact];\n\n    case DELETE_CONTACT:\n      return state.filter(el => el.id !== action.payload);\n\n    case EDIT_CONTACT:\n      return state.map(el => el.id === action.payload.id ? action.payload : el);\n\n    default:\n      return state;\n  }\n};\n\nexport default ContactReducer;","map":{"version":3,"sources":["/home/samira/Desktop/Work_DOC/react-frontend-app/src/reducers/ContactReducer.js"],"names":["uuid","ADD_CONTACT","DELETE_CONTACT","EDIT_CONTACT","GET_CONTACTS","ContactReducer","state","contacts","action","type","payload","newContact","filter","el","id","map"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,EAAmDC,YAAnD,QAAsE,kBAAtE;;AAIA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAG;AAACC,EAAAA,QAAQ,EAAC;AAAV,CAAT,EAAwBC,MAAxB,KAAmC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKL,YAAL;AACI,+BAAWE,KAAX;AAAkBC,QAAAA,QAAQ,EAAEC,MAAM,CAACE;AAAnC;;AAMJ,SAAKT,WAAL;AACI,aAAO,CAAC,GAAGK,KAAJ,EAAWE,MAAM,CAACG,UAAlB,CAAP;;AAEJ,SAAKT,cAAL;AACI,aAAOI,KAAK,CAACM,MAAN,CAAaC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUN,MAAM,CAACE,OAApC,CAAP;;AAGJ,SAAKP,YAAL;AACI,aAAOG,KAAK,CAACS,GAAN,CAAUF,EAAE,IAAKA,EAAE,CAACC,EAAH,KAAUN,MAAM,CAACE,OAAP,CAAeI,EAAzB,GAA8BN,MAAM,CAACE,OAArC,GAA+CG,EAAhE,CAAP;;AAGJ;AACI,aAAOP,KAAP;AApBR;AAsBH,CAvBD;;AAyBA,eAAeD,cAAf","sourcesContent":["import uuid from 'uuid';\nimport { ADD_CONTACT, DELETE_CONTACT, EDIT_CONTACT,GET_CONTACTS} from '../actions/types';\n\n\n\nconst ContactReducer = (state = {contacts:[]}, action) => {\n    switch (action.type) {\n        case GET_CONTACTS:\n            return {...state, contacts: action.payload};\n\n\n\n\n\n        case ADD_CONTACT:\n            return [...state, action.newContact]\n\n        case DELETE_CONTACT:\n            return state.filter(el => el.id !== action.payload);\n\n\n        case EDIT_CONTACT:\n            return state.map(el => (el.id === action.payload.id ? action.payload : el));\n\n\n        default:\n            return state;\n    }\n}\n\nexport default ContactReducer;"]},"metadata":{},"sourceType":"module"}